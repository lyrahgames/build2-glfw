./: lib{glfw}

# Common Sources
lib{glfw}: \
  include/h{**} \
  src/h{internal mappings} \
  src/c{context init input monitor vulkan window}

# We not use the config file.
# lib{glfw}: h{glfw_config}
# c.poptions += -D_GLFW_USE_CONFIG_H=1
# h{glfw_config}@./: install = false

# Linux Headers and Sources
lib{glfw}: \
  src/{h c}{xkb_unicode posix_time posix_thread \
            glx_context egl_context osmesa_context \
            linux_joystick} \
  src/h{x11_platform} \
  src/c{x11_init x11_monitor x11_window}: \
    include = ($c.target.class == 'linux')

# Windows Headers and Sources
lib{glfw}: \
  src/{h c}{win32_joystick wgl_context \
            egl_context osmesa_context} \
  src/h{win32_platform} \
  src/c{win32_init win32_monitor win32_time \
        win32_thread win32_window}: \
    include = ($c.target.class == 'windows')

# MacOS Headers and Sources
lib{glfw}: \
  src/h{cocoa_platform cocoa_joystick posix_thread \
        nsgl_context egl_context osmesa_context} \
  src/c{cocoa_time posix_thread \
        egl_context osmesa_context}: \
    include = ($c.target.class == 'macos')

# Platform-Dependent Configuration
c.poptions =+ "-I$src_base/include"
objs{*}: c.poptions += -D_GLFW_BUILD_DLL=1
lib{glfw}: c.export.poptions = "-I$src_base/include"

if ($c.target.class == 'linux')
{
  c.poptions += -D_GLFW_X11=1
  c.libs += -lrt -lm -ldl
  import libs = x11%lib{x11}
  import libs += pthread%lib{pthread}
  objs{*}: c.coptions += -fvisibility=hidden
  lib{glfw}: $libs
}
elif ($c.target.class == 'macos')
{
  c.poptions += -D_GLFW_COCOA=1
  c.libs += \
    -framework Cocoa \
    -framework IOKit \
    -framework CoreFoundation
  objs{*}: c.coptions += -fno-common -fvisibility=hidden
}
elif ($c.target.class == 'windows')
{
  c.poptions += -D_GLFW_WIN32=1
  c.poptions += -D_UNICODE
  libs{glfw}: c.export.poptions += -DGLFW_DLL

  if ($c.id == 'msvc')
  {
    # Assume, 'dinput.h' exists.
    c.poptions += /D_CRT_SECURE_NO_WARNINGS
    c.libs += gdi32.lib
  }
  elif ($c.id == 'clang')
  {
    c.libs += gdi32.lib
  }
  elif ($c.target.system == 'mingw32')
  {
    # Assume, 'dinput.h' and 'xinput.h' exist.
    c.poptions += -DWINVER=0x0501
    c.loptions += -Wl,--nxcompat -Wl,--dynamicbase -Wl,--high-entropy-va
    c.libs += -lgdi32
    objs{*}: c.loptions += -static-libgcc
  }
}


define cobj: file
cobj{*}: extension = m
# cobj_files = cocoa_init cocoa_joystick cocoa_monitor \
#              cocoa_window nsgl_context
define cobja: obja
cobja{*}: extension = a.o
define cobjs: objs
cobjs{*}: extension = so.o

for t: src/cobj{*}
{
  n = $name($t)

  liba{glfw}: src/cobja{$n}: include = ($c.target.class == 'macos')
  libs{glfw}: src/cobjs{$n}: include = ($c.target.class == 'macos')

  src/cobja{$n}: $t
  {{
    diag c ($<)
    $c.path $cc.poptions $c.poptions $cc.coptions $c.coptions $c.mode -o $path($>) -c -x objective-c $path($<)
  }}

  src/cobjs{$n}: $t
  {{
    diag c ($<)
    $c.path $cc.poptions $c.poptions $cc.coptions $c.coptions $c.mode -o $path($>) -c -x objective-c $path($<)
  }}
}

# Header Installation
src/h{*}: install = false
include/h{*}: install.subdirs = true
